#!/usr/bin/env bash

set -e -o pipefail

function cleanup(){
    rm "/tmp/news-${RANDOM_NUMBER}"
}

function generate_news(){
    echo $REPLY
    echo $RANDOM_NUMBER
    (head -n "$REPLY" "/tmp/news-${RANDOM_NUMBER}" \
      | tail -n 1 | awk -F'\t' '{print "https://explorersweb.com/"$NF"/"}' \
      | xargs -I{} -- 2>/dev/null curl {} \
      | grep --only-matching -e '<p>.*</p>' -e '<title>.*</title>' | pandoc -f html -t plain | less) || (echo "Unable to curl data...exiting"; exit 1)
}

function show_help(){
    echo  "USAGE: $0 [category_of_news] [--help]"
    echo  "OPTIONS:"
    echo -e "\n--help   Display this help message"
    echo "Categories to choose from:"
    echo -e "\t\tmountaineering\n\t\texpeditions\n\t\tpolar-exploration\n\t\tlong-distance-trekking\n\t\t8000ers"
    exit 0
}


function pick_news(){
    local NUMBER_PATTERN_1="^[0-9]$"
    local NUMBER_PATTERN_2="^[0-9]{2}$"
    local QUIT_PATTERN="^[qQ]$"
    echo
    read -p "Enter the number for the article you would like to read (or press q to quit) " -n 2 -r
    echo
    if [[ $REPLY =~ ${QUIT_PATTERN} ]]; then
        exit 0
    fi
    # Check if it matches pattern , then continue next else just exit out
    [[ $REPLY =~ ${NUMBER_PATTERN_1} ]] || [[ $REPLY =~ ${NUMBER_PATTERN_2} ]] || { echo "Cannot find number. Pattern not matched..."; exit 1; }
   
    # check for ghead or head before attempting to perform this nonsense here
    if ! 2>/dev/null command ghead; then
        generate_news 'head'
    else
        generate_news 'ghead'
    fi
}

function display_news(){
    declare -i COUNT
    #TODO: Rename COMMAND pls
    local COMMAND="$(2>/dev/null curl "${URL_FOR_NEWS}" \
        | pandoc -t plain | grep -A1 -i -E '<div class="news-card">' \
        | grep -v -E '<div class="news-card">' | grep -E "${PATTERN}" \
        | awk -F\" '{print $2}')" 
    local COUNT=1
    while read -r LINE; do
        local TITLE="$(awk -F/ '{print $4}' <(echo "${LINE}"))"
        echo -e "${COUNT}\t${TITLE}" | tee -a "/tmp/news-${RANDOM_NUMBER}"
        COUNT=$COUNT+1
    done < <(echo "${COMMAND}")
    pick_news
}
    
while getopts ":h" opt; do
    case $opt in
        h)
            show_help 
            ;;
        \?)
            echo "Invalid option: ${OPTARG}" >&2 
            exit 1
            ;;
    esac
done   

if [[ -z "$1" ]]; then
    echo "No Category provided...defaulting to category: \"mountaineering\"..."
    CATEGORY="mountaineering"
else
    echo "Searching for news in category: \"$1\"..."
    CATEGORY="$1"
fi

LOWER_CATEGORY="${CATEGORY,,}"

case $LOWER_CATEGORY in
    mountaineering)
        :
        ;;
    expeditions)
        :
        ;;
    polar-exploration)
        :
        ;;
    long-distance-trekking)
        :
        ;;
    8000ers)
        :
        ;;
    *)
        echo "Invalide choice...Exiting"
        exit 1
        ;;
esac

echo "Checking for news in category: ${LOWER_CATEGORY}..."
echo

RANDOM_NUMBER="${RANDOM}" 
WEBSITE="https://explorersweb.com"
URL_FOR_NEWS="${WEBSITE}/category/${LOWER_CATEGORY}/"
PATTERN="${URL_FOR_NEWS%*/*/*/}"

function main(){
    display_news
}

main
trap cleanup EXIT
